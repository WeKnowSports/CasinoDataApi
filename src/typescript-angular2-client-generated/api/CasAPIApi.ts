/**
 * SBTech Casino OpenAPI
 * Definition of the SBTech Casino API.
 *
 * OpenAPI spec version: 0.2.0
 * Contact: eram@sbtech.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class CasAPIApi {
    protected basePath = 'http://casino.sbtech.swagger.io/casinoapi/v1/';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * 
     * @summary Update that a game window is now closed. If 2 game keepalives where missed the platform automatically assumes the game is already closed.
     * @param id Id of game
     */
    public closed (id?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<string> {
        const localVarPath = this.basePath + '/games/closed';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (id !== undefined) {
            queryParameters['id'] = id;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary Get a games' extended information
     * @param ids Array of game ids
     */
    public getGameExt (ids: Array<string>, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.IGameExtra>> {
        const localVarPath = this.basePath + '/games/info';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'ids' is not null or undefined
        if (ids === null || ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling getGameExt.');
        }

        if (ids !== undefined) {
            queryParameters['ids'] = ids;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary Get a game-set for the requested game-shift
     * @param gameshift Gameshift name
     * @param channel Channel type for which games should be returned
     * @param demo Demo mode used into the game
     */
    public getGames (gameshift: string, channel: string, demo: boolean, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.IGameSet> {
        const localVarPath = this.basePath + '/games';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'gameshift' is not null or undefined
        if (gameshift === null || gameshift === undefined) {
            throw new Error('Required parameter gameshift was null or undefined when calling getGames.');
        }

        // verify required parameter 'channel' is not null or undefined
        if (channel === null || channel === undefined) {
            throw new Error('Required parameter channel was null or undefined when calling getGames.');
        }

        // verify required parameter 'demo' is not null or undefined
        if (demo === null || demo === undefined) {
            throw new Error('Required parameter demo was null or undefined when calling getGames.');
        }

        if (gameshift !== undefined) {
            queryParameters['gameshift'] = gameshift;
        }

        if (channel !== undefined) {
            queryParameters['channel'] = channel;
        }

        if (demo !== undefined) {
            queryParameters['demo'] = demo;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary Server heartbeat operation
     */
    public healthcheck (extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/_healthcheck';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary Update that a game window is alive. This API should be called periodically (default = 10sec) to update backend that the game is open and *available* for user interaction.
     * @param id Id of game
     */
    public keepalive (id?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<string> {
        const localVarPath = this.basePath + '/games/keepalive';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (id !== undefined) {
            queryParameters['id'] = id;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary Get launch-game params. This API should be called data required to run a game. The returned object includes the url of the game, with all the parameters required to launch it.
     * @param id platform internal game-id as returned in a game-set.
     * @param gameshift game-shift name
     * @param channel gaming platform- desktop, mobile/tablet or mini-game
     * @param demo request to play for-fun.
     */
    public launchGameParams (id: string, gameshift: string, channel: string, demo?: boolean, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ILaunchParams> {
        const localVarPath = this.basePath + '/games/launch';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling launchGameParams.');
        }

        // verify required parameter 'gameshift' is not null or undefined
        if (gameshift === null || gameshift === undefined) {
            throw new Error('Required parameter gameshift was null or undefined when calling launchGameParams.');
        }

        // verify required parameter 'channel' is not null or undefined
        if (channel === null || channel === undefined) {
            throw new Error('Required parameter channel was null or undefined when calling launchGameParams.');
        }

        if (id !== undefined) {
            queryParameters['id'] = id;
        }

        if (gameshift !== undefined) {
            queryParameters['gameshift'] = gameshift;
        }

        if (demo !== undefined) {
            queryParameters['demo'] = demo;
        }

        if (channel !== undefined) {
            queryParameters['channel'] = channel;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
