/**
 * SBTech Casino OpenAPI
 * Definition of the SBTech Casino API.
 *
 * OpenAPI spec version: 0.2.0
 * Contact: eram@sbtech.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH }                                         from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class CasAPIApi {
    protected basePath = 'http://casino.sbtech.swagger.io/v2';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }
	
	/**
     * 
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }

    /**
     * Receive games&#39; extended information
     * 
     * @param ids Array of game ids
     * @param lang 2 chars language code using ISO 639-1
     */
    public getGameExt(ids: Array<string>, lang?: string, extraHttpRequestParams?: any): Observable<Array<models.IGameExtra>> {
        return this.getGameExtWithHttpInfo(ids, lang, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get a gameshift game-set
     * 
     * @param gameshift Gameshift name
     * @param lang 2 chars language code using ISO 639-1
     */
    public getGames(gameshift: string, lang?: string, extraHttpRequestParams?: any): Observable<models.IGameSet> {
        return this.getGamesWithHttpInfo(gameshift, lang, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get launch-game params. This function should be called right after the player has requested to run a game. The resturned parameters include the url of the game, with all the parameters required to launch it.
     * 
     * @param id Id of game
     * @param gameshift Gameshift name
     * @param channel Launch platform- desktop, mobile or mini-game
     * @param lang 2 chars language code using ISO 639-1
     * @param demo Is demo mode
     */
    public launchGameParams(id: string, gameshift: string, channel: string, lang?: string, demo?: boolean, extraHttpRequestParams?: any): Observable<models.ILaunchParams> {
        return this.launchGameParamsWithHttpInfo(id, gameshift, channel, lang, demo, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Server heartbeat operation
     * 
     */
    public ping(extraHttpRequestParams?: any): Observable<{}> {
        return this.pingWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * Receive games&#39; extended information
     * 
     * @param ids Array of game ids
     * @param lang 2 chars language code using ISO 639-1
     */
    public getGameExtWithHttpInfo(ids: Array<string>, lang?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/games/info`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'ids' is not null or undefined
        if (ids === null || ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling getGameExt.');
        }
        if (lang !== undefined) {
            queryParameters.set('lang', <any>lang);
        }
        if (ids !== undefined) {
            queryParameters.set('ids', <any>ids);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (Bearer) required
        if (this.configuration.apiKey)
        {
            headers.set('Authorization', this.configuration.apiKey);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get a gameshift game-set
     * 
     * @param gameshift Gameshift name
     * @param lang 2 chars language code using ISO 639-1
     */
    public getGamesWithHttpInfo(gameshift: string, lang?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/games`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'gameshift' is not null or undefined
        if (gameshift === null || gameshift === undefined) {
            throw new Error('Required parameter gameshift was null or undefined when calling getGames.');
        }
        if (lang !== undefined) {
            queryParameters.set('lang', <any>lang);
        }
        if (gameshift !== undefined) {
            queryParameters.set('gameshift', <any>gameshift);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (Bearer) required
        if (this.configuration.apiKey)
        {
            headers.set('Authorization', this.configuration.apiKey);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get launch-game params. This function should be called right after the player has requested to run a game. The resturned parameters include the url of the game, with all the parameters required to launch it.
     * 
     * @param id Id of game
     * @param gameshift Gameshift name
     * @param channel Launch platform- desktop, mobile or mini-game
     * @param lang 2 chars language code using ISO 639-1
     * @param demo Is demo mode
     */
    public launchGameParamsWithHttpInfo(id: string, gameshift: string, channel: string, lang?: string, demo?: boolean, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/games/launch`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling launchGameParams.');
        }
        // verify required parameter 'gameshift' is not null or undefined
        if (gameshift === null || gameshift === undefined) {
            throw new Error('Required parameter gameshift was null or undefined when calling launchGameParams.');
        }
        // verify required parameter 'channel' is not null or undefined
        if (channel === null || channel === undefined) {
            throw new Error('Required parameter channel was null or undefined when calling launchGameParams.');
        }
        if (lang !== undefined) {
            queryParameters.set('lang', <any>lang);
        }
        if (id !== undefined) {
            queryParameters.set('id', <any>id);
        }
        if (gameshift !== undefined) {
            queryParameters.set('gameshift', <any>gameshift);
        }
        if (demo !== undefined) {
            queryParameters.set('demo', <any>demo);
        }
        if (channel !== undefined) {
            queryParameters.set('channel', <any>channel);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (Bearer) required
        if (this.configuration.apiKey)
        {
            headers.set('Authorization', this.configuration.apiKey);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Server heartbeat operation
     * 
     */
    public pingWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/ping`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
